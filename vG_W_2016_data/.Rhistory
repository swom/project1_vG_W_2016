cd<-getwd()
setwd(cd)
#loop through all created folders
network_types<-dir(pattern= "lol_ngi_simplified_offset_peaks$")
for (i in 1:length(network_types)) {
path_network_type_dir<-paste(cd,"/",network_types[i],sep = "")
ngi_Y_N<-dir(path = path_network_type_dir)
for (z in 1:length(ngi_Y_N)) {
path_ngi_Y_N<-paste(path_network_type_dir,"/",ngi_Y_N[z],sep = "")
mut_distributions<-dir(path = path_ngi_Y_N)
for (j in 1:length(mut_distributions)) {
path_mut_type_dir<-paste(path_ngi_Y_N,"/",mut_distributions[j],sep = "")
no_path_results<-list.files(path= path_mut_type_dir, pattern = glob2rx("result*.txt"))
no_path_error<-list.files(path= path_mut_type_dir,pattern = glob2rx("error*.txt"))
##attaching path to result files
results<-c()
for (results_index in 1:length(no_path_results)) {
results[results_index]<-paste(path_mut_type_dir,"/",no_path_results[results_index],sep = "")
}
##attaching path to error files
error<-c()
for (error_index in 1:length(no_path_results)) {
error[error_index]<-paste(path_mut_type_dir,"/",no_path_error[error_index],sep = "")
}
#open pdf file where you will save plots
pdf(paste(basename(cd),"_",network_types[i],"_",ngi_Y_N[z],"_",mut_distributions[j],".pdf", sep = ""))
#for loop for plotting square error max,min and average throughout simulation
for (k in 1:length(results)) {
#read table using name on name vector created before
table_er<-read.table(error[k])
colnames(table_er)<-c("time","min","max","average", "average_correct_answer","env")
#######plotting errors#####
#plot average
plot(table_er$time,
table_er$max,
type="n", xlab="gen", ylab="intake", main = paste(no_path_error[k],"average"),ylim = c(min(table_er$average),max(table_er$average)))
lines(table_er$time,table_er$min,col="black")
lines(table_er$time,table_er$max,col="red")
lines(table_er$time,table_er$average,col="green")
legend("topleft", legend=c("min_intake","max_intake","avergae_intake"),
col=c("black", "red","green"), lty=1, cex=0.8, bg='white')
#plot average of correct guesses
plot(table_er$time,
table_er$max,
type="n", xlab="gen", ylab="correct guess percentage", main = paste(no_path_error[k],"percentage of correct guesses"),ylim = c(0,1))
lines(table_er$time,table_er$average_correct_answer,col="blue")
# lines(table_er$time,table_er$env-1.1,col="black")
legend("topleft", legend=c("percentage of correct guesses"),
col=c("blue"), lty=1, cex=0.8, bg='white')
#
# #plot error made by ngi netwrok trying to match env value
# plot(table_er$time,
#      table_er$average_error,
#      type="n", xlab="gen", ylab="average_error", main = paste(no_path_error[k],"average_error"),ylim = c(min(table_er$average_error),max(table_er$average_error)))
# lines(table_er$time,table_er$average_error,col="purple")
# # lines(table_er$time,table_er$env-1.1,col="black")
#
# legend("topleft", legend=c("average_error"),
#        col=c("purple"), lty=1, cex=0.8, bg='white')
######plot the behaviour of the best netwrok in response to differet sin inputs with different periods######
for (l in 1:length(periods)) {
#read table using name on name vector created before
table<-read.table(results[k])
colnames(table)<-c("time","sin","100period")
#if period is longer then one plot the entire period, if it is smaller it will plot multiple periods until t=1
table$time<- if(periods[l]<1) table$time/periods[l] else table$time
plot(table$time*periods[l],
table$sin,
type="n", xlab="time", ylab="env", main = paste(no_path_results[k],"sin_period:",1/periods[l]),ylim = c(min(table$sin)-1,max(table$sin)+1))
lines(table$time*periods[l],1.6+0.5*sin(2*pi*table$time*periods[l]*periods[l]),col="black")
lines(table$time*periods[l],table$`100period`+1.1,col="red")
# lines(table$time*periods[l],table$error,col="orange")
# lines(table$time*periods[l],table$`100period_noise`*2+0.6,col="green")
#
# points(table$time*periods[l],1.6+sin(2*pi*table$time*periods[l]*periods[l])+table$clue_noise,col="purple",pch=1)
legend("bottomleft", legend=c("sin_function_value","Phenotype_switch_no_noise","Phenotype_switch_with_noise","env_noise","clue_noise"),
col=c("black", "red","green","purple","purple"), text.col = c("black", "red","green","purple","purple"),  lty=c(1,1,1,NA,NA), pch = c(NA,NA,NA,1,2), cex=0.8, bg='white')
}
}
dev.off()
}
}
}
# read.table(error[k])
# error[k]
# read.table(results[k])
# results[k]
cd<-getwd()
setwd(cd)
#loop through all created folders
network_types<-dir(pattern= "lol_ngi_simplified_offset_peaks$")
cd<-getwd()
setwd(cd)
#loop through all created folders
network_types<-dir(pattern= "lol_ngi_simplified_offset_peaks$")
#loop through all created folders
network_types<-dir(pattern= "offset_peaks$")
cd<-getwd()
setwd(cd)
#loop through all created folders
folders<-dir(pattern= "lol_ngi_simplified_complete$")
for (i in 1:length(folders)) {
path_folders_type_dir<-paste(cd,"/",folders[i],sep = "")
offsets<-dir(path = path_folders_type_dir)
for (t in 1:length(offsets)) {
path_offsets_dir<-paste(path_folders_type_dir,"/",offsets[t],sep = "")
ngi_Y_N<-dir(path = path_offsets_dir)
for (z in 1:length(ngi_Y_N)) {
path_ngi_Y_N<-paste(path_offsets_dir,"/",ngi_Y_N[z],sep = "")
mut_distributions<-dir(path = path_ngi_Y_N)
for (j in 1:length(mut_distributions)) {
path_mut_type_dir<-paste(path_ngi_Y_N,"/",mut_distributions[j],sep = "")
no_path_results<-list.files(path= path_mut_type_dir, pattern = glob2rx("result*.txt"))
no_path_error<-list.files(path= path_mut_type_dir,pattern = glob2rx("error*.txt"))
##attaching path to result files
results<-c()
for (results_index in 1:length(no_path_results)) {
results[results_index]<-paste(path_mut_type_dir,"/",no_path_results[results_index],sep = "")
}
##attaching path to error files
error<-c()
for (error_index in 1:length(no_path_results)) {
error[error_index]<-paste(path_mut_type_dir,"/",no_path_error[error_index],sep = "")
}
#open pdf file where you will save plots
# pdf(paste(basename(cd),"_",folders[i],"_",ngi_Y_N[z],"_",mut_distributions[j],".pdf", sep = ""))
#for loop for plotting square error max,min and average throughout simulation
for (k in 1:length(results)) {
#read table using name on name vector created before
table_er<-read.table(error[k])
colnames(table_er)<-c("time","min","max","average", "average_correct_answer","env")
#######plotting errors#####
#plot average
plot(table_er$time,
table_er$max,
type="n", xlab="gen", ylab="intake", main = paste(#no_path_error[k],
"average"),ylim = c(min(table_er$average),max(table_er$average)))
lines(table_er$time,table_er$min,col="black")
lines(table_er$time,table_er$max,col="red")
lines(table_er$time,table_er$average,col="green")
legend("topleft", legend=c("min_intake","max_intake","avergae_intake"),
col=c("black", "red","green"), lty=1, cex=0.8, bg='white')
#plot average of correct guesses
plot(table_er$time,
table_er$max,
type="n", xlab="gen", ylab="correct guess percentage", main = paste(#no_path_error[k],
"percentage of correct guesses"),ylim = c(0,1))
lines(table_er$time,table_er$average_correct_answer,col="blue")
# lines(table_er$time,table_er$env-1.1,col="black")
legend("topleft", legend=c("percentage of correct guesses"),
col=c("blue"), lty=1, cex=0.8, bg='white')
#
# #plot error made by ngi netwrok trying to match env value
# plot(table_er$time,
#      table_er$average_error,
#      type="n", xlab="gen", ylab="average_error", main = paste(no_path_error[k],"average_error"),ylim = c(min(table_er$average_error),max(table_er$average_error)))
# lines(table_er$time,table_er$average_error,col="purple")
# # lines(table_er$time,table_er$env-1.1,col="black")
#
# legend("topleft", legend=c("average_error"),
#        col=c("purple"), lty=1, cex=0.8, bg='white')
######plot the behaviour of the best netwrok in response to differet sin inputs with different periods######
for (l in 1:length(periods)) {
#read table using name on name vector created before
table<-read.table(results[k])
colnames(table)<-c("time","sin","offset","100period")
#if period is longer then one plot the entire period, if it is smaller it will plot multiple periods until t=1
table$time<- if(periods[l]<1) table$time/periods[l] else table$time
plot(table$time,
table$sin,
type="n", xlab="time", ylab="env", main = paste(no_path_results[k],"sin_period:",1/periods[l]),ylim = c(min(table$sin)-1,max(table$sin)+1))
lines(((1:500)/500)*(length(table[,1])),1.6+0.5*sin(2*pi/(length(table[,1]))*((1:500)/500)*(length(table[,1])+table_er$offset)),col="black")
lines(table$time*periods[l],table$`100period`+1.1,col="red")
# lines(table$time*periods[l],table$error,col="orange")
# lines(table$time*periods[l],table$`100period_noise`*2+0.6,col="green")
#
# points(table$time*periods[l],1.6+sin(2*pi*table$time*periods[l]*periods[l])+table$clue_noise,col="purple",pch=1)
legend("bottomleft", legend=c("sin_function_value","Phenotype_switch_no_noise"),
col=c("black", "red"), text.col = c("black", "red"),  lty=c(1,1), pch = c(NA,NA), cex=0.8, bg='white')
}
}
# dev.off()
}
}
}
}
# read.table(error[k])
# error[k]
# read.table(results[k])
# results[k]
cd<-getwd()
setwd(cd)
#loop through all created folders
folders<-dir(pattern= "lol_ngi_simplified_complete$")
cd<-getwd()
setwd(cd)
cd<-getwd()
setwd(cd/"ngi_test")
cd<-getwd()
setwd(cd)
#loop through all created folders
folders<-dir(pattern= "lol_ngi_simplified_complete$")
plot(3 * n * (n + 1))
n = 1:7
plot(3 * n * (n + 1))
plot(3 * n * (n - 1) + 1)
n = 1:7
f1 <- 3 * n * (n + 1)
f2 <- 3 * n * (n - 1) + 1
f1
f2
n = 1:7
f1 <- 3 * n * (n + 1)
f2 <- 3 * n * (n - 1)
f1
f2
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
list.files(path = '.',pattern = "reaction_norm_best_ind_s\\d+_f\\d+.*")
list.files(path = '.',pattern = "reaction_norm_best_ind_s20_f10")
list.files(path = '.',pattern = "reaction_norm_best_ind_s20_f10.csv")
list.files(path = '.',pattern = "reaction_norm_best_ind_s20_f10.csv")
setwd("X:\project1_vG_W_2016\vG_W_2016_data")
setwd("X:/project1_vG_W_2016/vG_W_2016_data")
list.files(path = '.',pattern = "reaction_norm_best_ind_s20_f10.csv")
list.files(path = '.',pattern = "reaction_norm_best_ind_s\\d+_f\\d+.csv")
