get_parts <- function(x, y){
parts <- unlist(strsplit(x, split = " "))
}
get_parts <- function(x, y){
parts <- unlist(strsplit(x, split = " "))
parts
}
sapply(funder_phylo$value ,get_parts)
new_data = sapply(funder_phylo$value ,get_parts)
View(new_data)
new_data = as.tibble(sapply(funder_phylo$value ,get_parts))
View(new_data)
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
substring(funder_phylo$value[i],
first = 1,
last = nchar(funder_phylo$value[i]) - 2)
funder_phylo$value = as.character(funder_phylo$value)
for (i in 1:length(funder_phylo$value)) {
funder_phylo$value[i] =
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
}
get_parts(funder_phylo$value[i])
get_parts(funder_phylo$value[i])
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
get_parts(funder_phylo$value[i])
# create an edge list data frame giving the hierarchical structure of your individuals
d1 <- data.frame(from="origin", to=paste("group", seq(1,5), sep=""))
d1
View(edges_level1_2)
View(data)
as.dataframe(get_parts(funder_phylo$value[i]))
as.data.frame(get_parts(funder_phylo$value[i]))
get_parts(funder_phylo$value[i])
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[2])
)
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[500]))
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[500]),
fill = TRUE)
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[500]),
fill = TRUE)
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]),
fill = TRUE)
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i)
funders_success = rbind(sim_run,funders_success)
}
funder_phylo = as_tibble(funders_success[,2])
funder_phylo$value = as.character(funder_phylo$value)
for (i in 1:length(funder_phylo$value)) {
funder_phylo$value[i] =
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
}
View(funder_phylo)
# create a data frame
data <- data.frame(
level1="CEO",
level2=c( rep("boss1",4), rep("boss2",4)),
level3=paste0("mister_", letters[1:8])
)
View(data)
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]),
fill = NA)
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
as.data.frame(parts)
}
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]),
fill = NA)
get_parts(funder_phylo$value[1])
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]),
fill = NA)
rbindlist(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]),
fill = NA)
get_parts(funder_phylo$value[1])
get_parts(funder_phylo$value[201])
parts
get_parts(funder_phylo$value[201]
)
get_parts(funder_phylo$value[1])
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i)
funders_success = rbind(sim_run,funders_success)
}
funder_phylo = as_tibble(funders_success[,2])
funder_phylo$value = as.character(funder_phylo$value)
for (i in 1:length(funder_phylo$value)) {
funder_phylo$value[i] =
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
View(funder_phylo)
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]),
fill = NA)
rbind(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]))
rbind.data.frame(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]))
install.packages(rowr)
install.packages("qpcR")
do.call(qpcR:::rbind.na(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]))
)
qpcR:::rbind.na(get_parts(funder_phylo$value[1]),get_parts(funder_phylo$value[201]))
test = get_parts(funder_phylo$value[1])
r
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
as.data.frame(parts, stringsAsFactors = FALSE)
}
test = get_parts(funder_phylo$value[1])
for (i in 2:(length(funder_phylo$value) - 1)) {
qpcR:::rbind.na(
get_parts(funder_phylo$value[i]),
get_parts(funder_phylo$value[i + 1])
)
}
test = get_parts(funder_phylo$value[1])
for (i in 1 :(length(funder_phylo$value) - 1)) {
qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
View(test)
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(funder_phylo$value[1])
for (i in 1 :(length(funder_phylo$value) - 1)) {
qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
get_parts(funder_phylo$value[i + 1])
test
qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
for (i in 1 :(length(funder_phylo$value) - 1)) {
test = qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
View(test)
test = get_parts(funder_phylo$value[1])
for (i in 1 :600) {
test = qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
View(sim_run)
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i)
funders_success = rbind(sim_run,funders_success)
}
funder_phylo = as_tibble(funders_success[,2])
funder_phylo$value = as.character(funder_phylo$value)
for (i in 1:length(funder_phylo$value)) {
funder_phylo$value[i] =
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(funder_phylo$value[1])
for (i in 1 : 600) {
test = qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
View(test)
View(test)
c(1:length(col(test)))
View(test)
as.data.frame(test)
as.tibble(test)
as.tibble(test)
test = as.data.frame(test)
c(1:length(col(test)))
length(col(test))
(1:ncol(test)
colnames(test) = c(1:ncol(test))
c(1:ncol(test))
colnames(test) = c(1:ncol(test))
View(test)
paste("level",c(1:ncol(test)), sep = "")
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
View(test)
edges_level1_2 <- test %>% select() %>% unique %>% rename(from=level1, to=level2)
View(test)
colnames(test)
edges_level1_2 <- test %>% select(level1,level2) %>% unique %>% rename(from=level1, to=level2)
View(edges_level1_2)
edge_list <- test %>% select(level1,level2) %>% unique %>% rename(from=level1, to=level2)
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from=level1, to=level2)
View(edge_list)
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
View(edge_list)
2:(length(ncol(test) - 1)
2:(length(ncol(test) - 1))
2:(length(ncol(test)) - 1)
length(ncol(test)
length(ncol(test))
length(ncol(test))
ncol(test)
colnames(test)[2]
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
for(i in 2:(ncol(test) - 1))
{
edges <- data %>% select(colnames(test)[i], colnames(test)[i + 1])
%>% unique
%>% rename(from=colnames(test)[i], to=colnames(test)[i + 1])
}
colnames(test)[i + 1]
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
for(i in 2:(ncol(test) - 1))
{
edges <- data %>% select(colnames(test)[i], colnames(test)[i + 1])
%>% unique
%>% rename(from=colnames(test)[i], to=colnames(test)[i + 1])
}
for(j in 2:(ncol(test) - 1))
{
edges <- data %>% select(colnames(test)[i], colnames(test)[i + 1])
%>% unique
%>% rename(from=colnames(test)[i], to=colnames(test)[i + 1])
}
for(j in 2:(ncol(test) - 1))
{
edges = test %>% select(colnames(test)[i], colnames(test)[i + 1])
%>% unique
%>% rename(from=colnames(test)[i], to=colnames(test)[i + 1])
}
edges = test %>% select(colnames(test)[i], colnames(test)[i + 1])  %>% unique   %>% rename(from=colnames(test)[i], to=colnames(test)[i + 1])
# create a data frame
data <- data.frame(
level1="CEO",
level2=c( rep("boss1",4), rep("boss2",4)),
level3=paste0("mister_", letters[1:8])
)
# transform it to a edge list!
edges_level1_2 <- data %>% select(level1, level2) %>% unique %>% rename(from=level1, to=level2)
edges_level2_3 <- data %>% select(level2, level3) %>% unique %>% rename(from=level2, to=level3)
edge_list=rbind(edges_level1_2, edges_level2_3)
View(edge_list)
for(j in 2:2)
{
edges = test %>% select(colnames(test)[i], colnames(test)[i + 1])  %>% unique   %>% rename(from=colnames(test)[i], to=colnames(test)[i + 1])
}
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
View(edge_list)
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i)
funders_success = rbind(sim_run,funders_success)
}
funder_phylo = as_tibble(funders_success[,2])
funder_phylo$value = as.character(funder_phylo$value)
for (i in 1:length(funder_phylo$value)) {
funder_phylo$value[i] =
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(funder_phylo$value[1])
for (i in 1 : 600) {
test = qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
test = as.data.frame(test)
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
View(test)
test %>% select("level1","level3")
test %>% select("level1","level3") %>% unique
test %>% select("level1","level3") %>% unique %>% rename(from="level1", to="level3")
test %>% select("level2","level3") %>% unique %>% rename(from="level1", to="level3")
test %>% select("level2","level3") %>% unique %>% rename(from="level2", to="level3")
for(j in 2:2))
for(j in 2:2)
{
edges = test %>% select(colnames(test)[i], colnames(test)[i + 1])
%>% unique
%>% rename(from=colnames(test)[i], to=colnames(test)[i + 1])
}
for(i in 2:2)
{
edges = test %>% select(colnames(test)[i], colnames(test)[i + 1])
%>% unique
%>% rename(from=colnames(test)[i], to=colnames(test)[i + 1])
}
for(i in 2:(ncol(test) - 1))
{
edges = test %>% select(colnames(test)[i], colnames(test)[i + 1])
%>% unique
%>% rename(from=colnames(test)[i], to=colnames(test)[i + 1])
}
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
for(j in 2:(ncol(test) - 1))
{
edges <- test %>% select(colnames(test)[j], colnames(test)[j + 1])
%>% unique
%>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
}
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
}
View(edge_list)
edges$from = paste(edges$from,"lev",toString(j), sep = "")
paste(edges$from,"lev",toString(j), sep = "")
paste(edges$from,paste("lev",toString(j),sep=""), sep = "")
paste(edges$from,paste("lev",toString(j),sep=""))
paste(edges$from, toString(j),sep="")
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
paste(edges$from, toString(j),sep="")
paste(edges$from, "lev", toString(j),sep="")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), edges$from, sep="")
rbind(edge_list, edges)
}
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), edges$from, sep="")
edge_list = rbind(edge_list, edges)
}
View(edge_list)
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), edges$from, sep="")
edges$to = paste("level", toString(j + 1), edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
View(edge_list)
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), edges$from, sep="")
edge_list$to = paste("level", toString(2), edges$to, sep="")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), edges$from, sep="")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), edge_list$from, sep="")
edge_list$to = paste("level", toString(2), edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), edges$from, sep="")
edges$to = paste("level", toString(j + 1), edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
View(edge_list)
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
View(edge_list)
mygraph <- graph_from_data_frame( edge_list )
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_diagonal() +
geom_node_point() +
theme_void()
edge_list[- grep("NA", edge_list$to),]
edge_list = edge_list[- grep("NA", edge_list$to),]
mygraph <- graph_from_data_frame( edge_list )
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_diagonal() +
geom_node_point() +
theme_void()
View(edge_list)
View(funder_phylo)
library(tidyr)
library(ggplot2)
library(stringr)
library(rlist)
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i)
funders_success = rbind(sim_run,funders_success)
}
funder_phylo = as_tibble(funders_success[,2])
funder_phylo$value = as.character(funder_phylo$value)
for (i in 1:length(funder_phylo$value)) {
funder_phylo$value[i] =
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(funder_phylo$value[1])
for (i in 1 : 600) {
test = qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
test = as.data.frame(test)
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
edge_list = edge_list[- grep("NA", edge_list$to),]
mygraph <- graph_from_data_frame( edge_list )
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_diagonal() +
geom_node_point() +
theme_void()
for (i in 1 : (nrow(funder_phylo) -1)) {
test = qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
test = as.data.frame(test)
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
edge_list = edge_list[- grep("NA", edge_list$to),]
mygraph <- graph_from_data_frame( edge_list )
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_diagonal() +
geom_node_point() +
theme_void()
saveRDS(mygraph)
saveRDS(mygraph,file = "phylogenesis_s1")
phylo = load("phylogenesis_s1")
phylo = readRDS("phylogenesis_s1")
saveRDS(edge_list,"edge_list_S1")
loaded_edge_list = readRDS("edge_list_S1")
loaded_edge_list == edge_list
