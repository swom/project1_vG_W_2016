fig
htmlwidgets::saveWidget(fig, paste("RN_",i,"_",j,".html", sep = ""))
}
}
#Making colors for graph
transparent <- rgb( 0, 255, 0, max = 255, alpha = 0.5, names = "t")
blue <- rgb(0, 0, 255, max = 255, alpha = 0, names = "o")
all_reac_norms$col = as.factor(ifelse(all_reac_norms$V4 == 0, blue,transparent))
all_reac_norms = all_reac_norms[ as.numeric(row.names(all_reac_norms)) %% 2 == 0,]
library(plotly)
axx <- list(
nticks = 4,
range = c(0,20)
)
axy <- list(
nticks = 4,
range = c(0,20)
)
axz <- list(
nticks = 4,
range = c(0,20)
)
fig <- plot_ly(all_reac_norms %>% subset(seed == i & change == j),
x = ~V1, y = ~V2, z = ~V3, color = ~col, colors = levels(all_reac_norms$col), alpha = 0.1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <- plot_ly(all_reac_norms %>% subset(seed == i & change == j),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = levels(all_reac_norms$col), alpha = 0.1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
levels(all_reac_norms$col)
fig <- plot_ly(all_reac_norms %>% subset(seed == i & change == j & V4 == 1),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = levels(all_reac_norms$col), alpha = 0.1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <- plot_ly(all_reac_norms %>% subset(seed == i & change == j & V4 == 1),
x = ~V1, y = ~V2, z = ~V3, color = ~col, colors = levels(all_reac_norms$col), alpha = 0.1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
#Making colors for graph
green <- rgb( 0, 255, 0, max = 255, alpha = 0.5, names = "t")
fig <- plot_ly(all_reac_norms %>% subset(seed == i & change == j & V4 == 1),
x = ~V1, y = ~V2, z = ~V3, color = ~col, colors = c(blue,green), alpha = 0.1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <- plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
for (i in levels(all_reac_norms$seed)) {
for (j in levels(all_reac_norms$change)) {
fig <- plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
htmlwidgets::saveWidget(fig, paste("RN_",i,"_",j,".html", sep = ""))
}
}
fig <- plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1,
title = paste("RN_",i,"_",j, sep = "")
)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <- plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1,
title = paste("RN_",i,"_",j, sep = "")
)
fig <- fig %>% add_markers()
fig <- fig %>% layout(title3d(paste("RN_",i,"_",j, sep = "")))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
library(plotly)
fig <- scatter3D(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1,
title.text = paste("RN_",i,"_",j, sep = "")
)
fig <- scatter3d(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1,
title.text = paste("RN_",i,"_",j, sep = "")
)
fig <- scatter3d(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1,
title.text = paste("RN_",i,"_",j, sep = "")
)
fig <- fig %>% layout(title = paste("RN_",i,"_",j, sep = ""))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <-plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1,
title.text = paste("RN_",i,"_",j, sep = "")
)
fig <- fig %>% layout(title = paste("RN_",i,"_",j, sep = ""))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <-plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1,
)
fig <-plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1
)
fig <- fig %>% layout(title = paste("RN_",i,"_",j, sep = ""))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
export(fig, paste("RN_",i,"_",j,".png", sep = ""))
fig <-plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1
)
for (i in levels(all_reac_norms$seed)) {
for (j in levels(all_reac_norms$change)) {
fig <-plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1
)
fig <- fig %>% layout(title = paste("RN_",i,"_",j, sep = ""))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
htmlwidgets::saveWidget(fig, paste("RN_",i,"_",j,".html", sep = ""))
orca(fig, paste("RN_",i,"_",j,".pdf", sep = ""))
}
}
fig <-plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1
)
fig <- fig %>% layout(title = paste("RN_",i,"_",j, sep = ""))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
htmlwidgets::saveWidget(fig, paste("RN_",i,"_",j,".html", sep = ""))
orca(fig, paste("RN_",i,"_",j,".pdf", sep = ""))
for (i in levels(all_reac_norms$seed)) {
for (j in levels(all_reac_norms$change)) {
fig <-scatter3d(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1
)
fig <- fig %>% layout(title = paste("RN_",i,"_",j, sep = ""))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
htmlwidgets::saveWidget(fig, paste("RN_",i,"_",j,".html", sep = ""))
}
}
for (i in levels(all_reac_norms$seed)) {
for (j in levels(all_reac_norms$change)) {
fig <-plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1,
)
fig <- fig %>% layout(title = paste("RN_",i,"_",j, sep = ""))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
htmlwidgets::saveWidget(fig, paste("RN_",i,"_",j,".html", sep = ""))
}
}
for (i in levels(all_reac_norms$seed)) {
for (j in levels(all_reac_norms$change)) {
fig <-plot_ly(all_reac_norms %>% subset(seed == i & change == j ),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(blue,green), alpha = 0.1
)
fig <- fig %>% layout(title = paste("RN_",i,"_",j, sep = ""))
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
htmlwidgets::saveWidget(fig, paste("RN_",i,"_",j,".html", sep = ""))
}
}
install.packages("networkD3")
library(tidyr)
library(tidyverse)
library(ggplot2)
library(stringi)
library(rlist)
library(igraph)
library(ggraph)
library(networkD3)
########Plot Philogenesis###############
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i, header = FALSE, sep = ',')
funders_success = rbind(sim_run,funders_success)
}
#simple plot to see if there are any super fit individuals
simple_frame = funders_success[,c(1,length(funders_success))]
ggplot(simple_frame, aes(x = V1, y = V54))+
geom_point()+
geom_smooth()
funder_phylo = as_tibble(funders_success[,2])
funder_phylo$value = as.character(funder_phylo$value)
for (i in 1:length(funder_phylo$value)) {
funder_phylo$value[i] =
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(funder_phylo$value[1])
View(funder_phylo)
for (i in 2 : (nrow(funder_phylo))) {
test = qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i])
)
}
View(test)
source('X:/project1_vG_W_2016/vG_W_2016_data/ScriptPlotFunders.R')
########Plot Philogenesis###############
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i, header = FALSE, sep = ',')
funders_success = rbind(sim_run,funders_success)
}
#simple plot to see if there are any super fit individuals
simple_frame = funders_success[,c(1,length(funders_success))]
ggplot(simple_frame, aes(x = V1, y = V54))+
geom_point()+
geom_smooth()
last_gen = as_tibble(funders_success[funders_success$V1 == max(funders_success$V1) - 1,2])
last_gen$value = as.character(last_gen$value)
for (i in 1:length(last_gen$value)) {
last_gen$value[i] =
substring(last_gen$value[i],
first = 2,
last = nchar(last_gen$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(last_gen$value[1])
for (i in 2 : (nrow(last_gen))) {
test = qpcR:::rbind.na(
test,
get_parts(last_gen$value[i])
)
}
View(test)
test = as.data.frame(test)
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
edge_list = edge_list[- grep("NA", edge_list$to),]
saveRDS(edge_list,"edge_list_S1_last_gen")
loaded_edge_list = readRDS("edge_list_S1_last_gen")
mygraph <- graph_from_data_frame( loaded_edge_list )
#Testing different possible layouts
ggraph(mygraph, layout = 'tree') +
geom_edge_diagonal() +
geom_node_point() +
theme_graph()
View(edges)
View(test)
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
View(edge_list)
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
View(edges)
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
View(edges)
edge_list = rbind(edge_list, edges)
View(edge_list)
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
(ncol(test) - 1)
max(funders_success$V1)
View(funders_success)
as_tibble(funders_success[funders_success$V1 == max(funders_success$V1) - 1,2])
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i, header = FALSE, sep = ',')
funders_success = rbind(sim_run,funders_success)
}
#simple plot to see if there are any super fit individuals
simple_frame = funders_success[,c(1,length(funders_success))]
ggplot(simple_frame, aes(x = V1, y = V54))+
geom_point()+
geom_smooth()
last_gen = as_tibble(funders_success[funders_success$V1 == max(funders_success$V1) - 1,2])
last_gen$value = as.character(last_gen$value)
View(last_gen)
last_gen = as_tibble(funders_success[funders_success$V1 == max(funders_success$V1) - 1,])
last_gen$value = as.character(last_gen$value)
View(last_gen)
2
last_gen = as_tibble(funders_success[funders_success$V1 == max(funders_success$V1) - 1,2])
last_gen = as_tibble(funders_success[funders_success$V1 == max(funders_success$V1) - 1,2])
last_gen$value = as.character(last_gen$value)
for (i in 1:length(last_gen$value)) {
last_gen$value[i] =
substring(last_gen$value[i],
first = 2,
last = nchar(last_gen$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(last_gen$value[1])
for (i in 2 : (nrow(last_gen))) {
test = qpcR:::rbind.na(
test,
get_parts(last_gen$value[i])
)
}
test = as.data.frame(test)
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
View(edge_list)
View(test)
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
View(edge_list)
View(test)
edge_list = edge_list[- grep("NA", edge_list$to),]
View(edge_list)
test = get_parts(last_gen$value[1])
for (i in 2 : (nrow(last_gen))) {
test = qpcR:::rbind.na(
test,
get_parts(last_gen$value[i])
)
}
test = as.data.frame(test)
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
edge_list[- grep("NA", edge_list$to),]
- grep("NA", edge_list$to)
saveRDS(edge_list,"edge_list_S1_last_gen")
loaded_edge_list = readRDS("edge_list_S1_last_gen")
mygraph <- graph_from_data_frame( loaded_edge_list )
#Testing different possible layouts
ggraph(mygraph, layout = 'tree') +
geom_edge_diagonal() +
geom_node_point() +
theme_graph()
ggraph(mygraph, layout = 'tree') +
geom_edge_elbow() +
coord_fixed()
ggraph(mygraph, layout = 'circlepack') +
geom_node_circle(aes(fill = depth), size = 0.25, n = 50) +
coord_fixed()
#Change layout so all nodes in same generation have x from 1:100
mylayout = create_layout(mygraph, 'tree')
mylayout$x = as.numeric(stringi::stri_match(layout$name, regex = "\\d+$" ))
ggraph(mylayout)+
geom_edge_diagonal() +
geom_node_point() +
theme_graph()
#Start from links/edges
links = loaded_edge_list
#All links happen only once so all values for the links are 1
links$value = 1
net3D = igraph_to_networkD3(mygraph)
simpleNetwork(net3D)
# From these,  we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$from, nodes$name)-1
links$IDtarget <- match(links$to, nodes$name)-1
# Make the Network -> it is unreadable
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight= FALSE,
nodeWidth=40, fontSize=13, nodePadding=20,
opacityNoHover = 0.3
)
p
# Make the Network -> it is unreadable
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight= FALSE,
nodeWidth=40, fontSize=13, nodePadding=20,
)
net3D = igraph_to_networkD3(mygraph)
simpleNetwork(net3D)
View(net3D)
# From these,  we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$from, nodes$name)-1
links$IDtarget <- match(links$to, nodes$name)-1
# Make the Network -> it is unreadable
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight= FALSE,
nodeWidth=40, fontSize=13, nodePadding=20,
)
p
View(links)
#Start from links/edges
links = loaded_edge_list
#All links happen only once so all values for the links are 1
links$value = 1
View(links)
# From these,  we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$from),
as.character(links$to)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$from, nodes$name)-1
links$IDtarget <- match(links$to, nodes$name)-1
# Make the Network -> it is unreadable
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight= FALSE,
nodeWidth=40, fontSize=13, nodePadding=20,
)
p
