#loop through all created folders
network_types<-dir(pattern= "offset_peaks$")
cd<-getwd()
setwd(cd)
#loop through all created folders
folders<-dir(pattern= "lol_ngi_simplified_complete$")
for (i in 1:length(folders)) {
path_folders_type_dir<-paste(cd,"/",folders[i],sep = "")
offsets<-dir(path = path_folders_type_dir)
for (t in 1:length(offsets)) {
path_offsets_dir<-paste(path_folders_type_dir,"/",offsets[t],sep = "")
ngi_Y_N<-dir(path = path_offsets_dir)
for (z in 1:length(ngi_Y_N)) {
path_ngi_Y_N<-paste(path_offsets_dir,"/",ngi_Y_N[z],sep = "")
mut_distributions<-dir(path = path_ngi_Y_N)
for (j in 1:length(mut_distributions)) {
path_mut_type_dir<-paste(path_ngi_Y_N,"/",mut_distributions[j],sep = "")
no_path_results<-list.files(path= path_mut_type_dir, pattern = glob2rx("result*.txt"))
no_path_error<-list.files(path= path_mut_type_dir,pattern = glob2rx("error*.txt"))
##attaching path to result files
results<-c()
for (results_index in 1:length(no_path_results)) {
results[results_index]<-paste(path_mut_type_dir,"/",no_path_results[results_index],sep = "")
}
##attaching path to error files
error<-c()
for (error_index in 1:length(no_path_results)) {
error[error_index]<-paste(path_mut_type_dir,"/",no_path_error[error_index],sep = "")
}
#open pdf file where you will save plots
# pdf(paste(basename(cd),"_",folders[i],"_",ngi_Y_N[z],"_",mut_distributions[j],".pdf", sep = ""))
#for loop for plotting square error max,min and average throughout simulation
for (k in 1:length(results)) {
#read table using name on name vector created before
table_er<-read.table(error[k])
colnames(table_er)<-c("time","min","max","average", "average_correct_answer","env")
#######plotting errors#####
#plot average
plot(table_er$time,
table_er$max,
type="n", xlab="gen", ylab="intake", main = paste(#no_path_error[k],
"average"),ylim = c(min(table_er$average),max(table_er$average)))
lines(table_er$time,table_er$min,col="black")
lines(table_er$time,table_er$max,col="red")
lines(table_er$time,table_er$average,col="green")
legend("topleft", legend=c("min_intake","max_intake","avergae_intake"),
col=c("black", "red","green"), lty=1, cex=0.8, bg='white')
#plot average of correct guesses
plot(table_er$time,
table_er$max,
type="n", xlab="gen", ylab="correct guess percentage", main = paste(#no_path_error[k],
"percentage of correct guesses"),ylim = c(0,1))
lines(table_er$time,table_er$average_correct_answer,col="blue")
# lines(table_er$time,table_er$env-1.1,col="black")
legend("topleft", legend=c("percentage of correct guesses"),
col=c("blue"), lty=1, cex=0.8, bg='white')
#
# #plot error made by ngi netwrok trying to match env value
# plot(table_er$time,
#      table_er$average_error,
#      type="n", xlab="gen", ylab="average_error", main = paste(no_path_error[k],"average_error"),ylim = c(min(table_er$average_error),max(table_er$average_error)))
# lines(table_er$time,table_er$average_error,col="purple")
# # lines(table_er$time,table_er$env-1.1,col="black")
#
# legend("topleft", legend=c("average_error"),
#        col=c("purple"), lty=1, cex=0.8, bg='white')
######plot the behaviour of the best netwrok in response to differet sin inputs with different periods######
for (l in 1:length(periods)) {
#read table using name on name vector created before
table<-read.table(results[k])
colnames(table)<-c("time","sin","offset","100period")
#if period is longer then one plot the entire period, if it is smaller it will plot multiple periods until t=1
table$time<- if(periods[l]<1) table$time/periods[l] else table$time
plot(table$time,
table$sin,
type="n", xlab="time", ylab="env", main = paste(no_path_results[k],"sin_period:",1/periods[l]),ylim = c(min(table$sin)-1,max(table$sin)+1))
lines(((1:500)/500)*(length(table[,1])),1.6+0.5*sin(2*pi/(length(table[,1]))*((1:500)/500)*(length(table[,1])+table_er$offset)),col="black")
lines(table$time*periods[l],table$`100period`+1.1,col="red")
# lines(table$time*periods[l],table$error,col="orange")
# lines(table$time*periods[l],table$`100period_noise`*2+0.6,col="green")
#
# points(table$time*periods[l],1.6+sin(2*pi*table$time*periods[l]*periods[l])+table$clue_noise,col="purple",pch=1)
legend("bottomleft", legend=c("sin_function_value","Phenotype_switch_no_noise"),
col=c("black", "red"), text.col = c("black", "red"),  lty=c(1,1), pch = c(NA,NA), cex=0.8, bg='white')
}
}
# dev.off()
}
}
}
}
# read.table(error[k])
# error[k]
# read.table(results[k])
# results[k]
cd<-getwd()
setwd(cd)
#loop through all created folders
folders<-dir(pattern= "lol_ngi_simplified_complete$")
cd<-getwd()
setwd(cd)
cd<-getwd()
setwd(cd/"ngi_test")
cd<-getwd()
setwd(cd)
#loop through all created folders
folders<-dir(pattern= "lol_ngi_simplified_complete$")
plot(3 * n * (n + 1))
n = 1:7
plot(3 * n * (n + 1))
plot(3 * n * (n - 1) + 1)
n = 1:7
f1 <- 3 * n * (n + 1)
f2 <- 3 * n * (n - 1) + 1
f1
f2
n = 1:7
f1 <- 3 * n * (n + 1)
f2 <- 3 * n * (n - 1)
f1
f2
phylo = readRDS("phylogenesis_s1")
setwd("X:/project1_vG_W_2016/vG_W_2016_data")
phylo = readRDS("phylogenesis_s1")
ggraph(phylo, layout = 'tree', circular = FALSE) +
geom_edge_diagonal() +
geom_node_point() +
theme_void()
library(tidyr)
library(ggplot2)
library(stringr)
library(rlist)
library(ggraph)
ggraph(phylo, layout = 'tree', circular = FALSE) +
geom_edge_diagonal() +
geom_node_point() +
theme_void()
ggraph(phylo, layout = 'tree') +
geom_edge_arc() +
geom_node_point() +
theme_void()
ggraph(phylo, layout = 'tree') +
geom_edge_link0() +
geom_node_point() +
theme_void()
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i)
funders_success = rbind(sim_run,funders_success)
}
funder_phylo = as_tibble(funders_success[,2])
funder_phylo$value = as.character(funder_phylo$value)
for (i in 1:length(funder_phylo$value)) {
funder_phylo$value[i] =
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(funder_phylo$value[1])
for (i in 1 : 600) {
test = qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
test = as.data.frame(test)
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
edge_list = edge_list[- grep("NA", edge_list$to),]
#saveRDS(edge_list,"edge_list_S1")
loaded_edge_list = readRDS("edge_list_S1")
mygraph <- graph_from_data_frame( edge_list )
library(tidyr)
library(ggplot2)
library(stringr)
library(rlist)
library(ggraph)
########Plot Philogenesis###############
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i)
funders_success = rbind(sim_run,funders_success)
}
funder_phylo = as_tibble(funders_success[,2])
funder_phylo$value = as.character(funder_phylo$value)
for (i in 1:length(funder_phylo$value)) {
funder_phylo$value[i] =
substring(funder_phylo$value[i],
first = 2,
last = nchar(funder_phylo$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(funder_phylo$value[1])
for (i in 1 : 600) {
test = qpcR:::rbind.na(
test,
get_parts(funder_phylo$value[i + 1])
)
}
test = as.data.frame(test)
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
edge_list = edge_list[- grep("NA", edge_list$to),]
#saveRDS(edge_list,"edge_list_S1")
loaded_edge_list = readRDS("edge_list_S1")
mygraph <- graph_from_data_frame( edge_list )
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
View(test)
library(tidyverse)
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
edge_list = edge_list[- grep("NA", edge_list$to),]
mygraph <- graph_from_data_frame( edge_list )
library(ggraph)
mygraph <- graph_from_data_frame( edge_list )
library(igraph)
mygraph <- graph_from_data_frame( edge_list )
ggraph(mygraph, layout = 'tree') +
geom_edge_link0() +
geom_node_point() +
theme_void()
#saveRDS(mygraph,file = "phylogenesis_s1")
phylo = readRDS("phylogenesis_s1")
ggraph(phylo, layout = 'tree') +
geom_edge_link0() +
geom_node_point() +
theme_void()
ggraph(mygraph, layout = 'tree') +
geom_edge_diagonal() +
geom_node_point() +
theme_void()
ggraph(mygraph, layout = 'tree') +
geom_edge_diagonal() +
theme_graph()
geom_node_point() +
theme_void()
ggraph(mygraph, layout = 'tree') +
geom_edge_diagonal() +
geom_node_point() +
theme_graph()
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
rand_demographic = data.frame()
for (i in  list.files(path = '.',pattern = "random_cond_sim_demographic_s\\d+_change_\\d+_amplitude_\\d+.*"))
{
conditions = read.table(i, sep = ",")
conditions$seed = sub( "^.*s(\\d+).*",'\\1', i)
conditions$change = sub( "^.*change_(\\d+).*",'\\1', i)
conditions$amplitude = sub( "^.*amplitude_(\\d+)",'\\1', i)
rand_demographic = rbind(conditions,rand_demographic)
}
n_columns = ncol(rand_demographic)
rand_demographic = rand_demographic[,-c(5: (n_columns - 3) )]
colnames(rand_demographic)= c("condition",
"active",
"spore",
"sporu",
"seed",
"change_freq",
"amplitude")
rand_demographic <- pivot_longer(
rand_demographic,
cols = c("active", "spore", "sporu"),
names_to = "variable"
)
rand_demographic$amplitude = as.factor(rand_demographic$amplitude)
rand_demographic$change_freq = as.factor(rand_demographic$change_freq)
rand_demographic$seed = as.factor(rand_demographic$seed)
rand_demographic$condition = as.factor(rand_demographic$condition)
rand_demographic$variable = as.factor(rand_demographic$variable)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value, col = )) +
geom_tile(color = "black", size = 0.5) +
scale_fill_gradient(low = "red",
high = "green") +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value, col = )) +
geom_tile(color = "black", size = 0.5) +
scale_fill_gradient(low = "red",
mid = "blue",
high = "green") +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value, col = )) +
geom_tile(color = "black", size = 0.5) +
scale_fill_gradient(low = "red",
mid = "navy",
high = "green") +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value, col = )) +
geom_tile(color = "black", size = 0.5) +
scale_fill_gradient2(low = "red",
mid = "navy",
high = "green") +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value, col = )) +
geom_tile(color = "black", size = 0.5) +
scale_fill_gradient2(low="red", mid="navy", high="green",
limits=range(value)) +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value, col = )) +
geom_tile(color = "black", size = 0.5) +
scale_fill_gradient2(low="red", mid="navy", high="green",
limits=range(rand_demographic$value)) +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient2(low = "red",mid = "navy",high = "green")
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient2(low = "red",mid = "navy",high = "green")
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient2(low = "red",mid = "navy",high = "green")+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient2(low = "red",mid = "navy",high = "green"
, midpoint = max(value)/2)+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
, midpoint = 5000)+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient2(low = "red",mid = "navy",high = "green"
, midpoint = 5000)+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient2(low = muted("red"),mid = "navy",high = "green"
, midpoint = 5000)+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient2(mycol)+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
mycol <- c("navy", "blue", "cyan", "lightcyan", "yellow", "red", "red4")
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient2(mycol)+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient(mycol)+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
mycol <- c("navy", "blue", "cyan", "lightcyan", "yellow", "red", "red4")
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient(mycol)+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
rand_demographic %>%
subset(variable == "spore") %>%
ggplot(aes(condition, seed, fill = value)) +
scale_fill_gradient(mycol)+
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ amplitude)
new_rand_demo = rand_demographic %>%
mutate(
"ratio_value" = value / max(value)
)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
rand_demographic = data.frame()
for (i in  list.files(path = '.',pattern = "random_cond_sim_demographic_s\\d+_change_\\d+_amplitude_\\d+.*"))
{
conditions = read.table(i, sep = ",")
conditions$seed = sub( "^.*s(\\d+).*",'\\1', i)
conditions$change = sub( "^.*change_(\\d+).*",'\\1', i)
conditions$amplitude = sub( "^.*amplitude_(\\d+)",'\\1', i)
rand_demographic = rbind(conditions,rand_demographic)
}
n_columns = ncol(rand_demographic)
rand_demographic = rand_demographic[,-c(5: (n_columns - 3) )]
colnames(rand_demographic)= c("condition",
"active",
"spore",
"sporu",
"seed",
"change_freq",
"amplitude")
rand_demographic <- pivot_longer(
rand_demographic,
cols = c("active", "spore", "sporu"),
names_to = "variable"
)
rand_demographic$amplitude = as.factor(rand_demographic$amplitude)
rand_demographic$change_freq = as.factor(rand_demographic$change_freq)
rand_demographic$seed = as.factor(rand_demographic$seed)
rand_demographic$condition = as.factor(rand_demographic$condition)
rand_demographic$variable = as.factor(rand_demographic$variable)
new_rand_demo = rand_demographic %>%
mutate(
"ratio_value" = value / max(value)
)
View(mygraph)
View(new_rand_demo)
View(new_rand_demo)
View(rand_demographic)
View(new_rand_demo)
new_rand_demo = rand_demographic %>%
group_by(condition,change_freq) %>%
mutate(
"ratio_value" = value / max(value)
)
rand_demographic %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = value)) +
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
View(new_rand_demo)
View(new_rand_demo)
new_rand_demo %>%
subset(variable == "spore") %>%
subset(amplitude == "1.500000.csv") %>%
ggplot(aes(condition, seed, fill = ratio_value)) +
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ .)
new_rand_demo %>%
subset(variable == "spore") %>%
ggplot(aes(condition, seed, fill = ratio_value)) +
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ amplitude)
