fig <- plot_ly(small_reac_norm %>% subset(V4 == 1),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(transparent,blue), alpha = 1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
install.packages("Rvcg")
library(Rvcg)
data(dummyhead)
save(all_reac_norms)
save(all_reac_norms,"all_reac_norm")
save(all_reac_norms,"all_reac_norms")
save(all_reac_norms,"all_reac_norms.R")
save(all_reac_norms,file = "all_reac_norms.R")
load("all_reac_norms.R")
data(dummyhead)
wire3d(dummyhead.mesh)
x <- y <- z <- seq(-4, 4, by = 0.2)
M <- mesh(x, y, z)
library(plot3D)
M <- mesh(x, y, z)
View(M)
R <- with (M, sqrt(x^2 + y^2 +z^2))
x <- y <- z <- seq(0, 10, by = 0.2)
M <- mesh(x, y, z)
View(M)
M
x <- y <- z <- seq(0, 1, by = 0.2)
M <- mesh(x, y, z)
M
R <- with (M, sqrt(x^2 + y^2 +z^2))
R
p <- sin(2*R)/(R+1e-3)
p
isosurf3D(x, y, z, colvar = p, level = 0, col = "red")
persp(Volcano)
volcano
library("rgl")
points3d(quakes$long/22, quakes$lat/28, -quakes$depth/640, size = 2)
box3d(col = "gray")
title3d(xlab = "long", ylab = "lat", zlab = "depth")
de <- kde3d(quakes$long, quakes$lat, -quakes$depth, n = 40)
contour3d(de$d, level = exp(-12), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray", add = TRUE)
contour3d(de$d, level = 1, x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray", add = TRUE)
View(de)
View(de)
de[["d"]]
library("rgl")
quakes
quakes =quakes
View(quakes)
contour3d(de$d, level = 1, x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0.5 add = TRUE)
contour3d(de$d, level = 1, x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0.5, add = TRUE)
contour3d(de$d, level = exp(-12), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0.5, add = TRUE)
contour3d(de$d, level = exp(-12), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0, add = TRUE)
contour3d(de$d, level = exp(-12), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0, add = TRUE)
points3d(quakes$long/22, quakes$lat/28, -quakes$depth/640, size = 2)
contour3d(de$d, level = exp(-12), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0, add = TRUE)
contour3d(de$d, level = exp(-12), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 60, add = TRUE)
contour3d(de$d, level = exp(-12), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 60, add = TRUE)
contour3d(de$d, level = exp(-12), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0.5, add = TRUE)
#save(all_reac_norms,file = "all_reac_norms.R")
load("all_reac_norms.R")
for (i in  list.files(path = '.',pattern = "reaction_norm_best_ind_s1_f0.csv"))
{
reac_norm = read.table(i, sep = ",")
reac_norm$seed = sub( "^.*s(\\d+).*",'\\1', i)
reac_norm$change = sub( "^.*f(\\d+).*",'\\1', i)
all_reac_norms = rbind(reac_norm,all_reac_norms)
}
points3d(reac_norm$V1, reac_norm$V2, reac_norm$V3, size = 0.2)
de <- kde3d(reac_norm$V1, reac_norm$V2, reac_norm$V3, n = 40)
small_reac_norm = reac_norm[ as.numeric(row.names(reac_norm)) %% 2 == 0,]
small_reac_norm = small_reac_norm[ as.numeric(row.names(reac_norm)) %% 3 == 0,]
small_reac_norm = small_reac_norm[ as.numeric(row.names(reac_norm)) %% 7 == 0,]
points3d(small_reac_norm$V1, small_reac_norm$V2, small_reac_norm$V3, size = 0.2)
points3d(small_reac_norm$V1, small_reac_norm$V2, small_reac_norm$V3, size = 1)
points3d(small_reac_norm$V1, small_reac_norm$V2, small_reac_norm$V3, size = 2)
de <- kde3d(reac_norm$V1, reac_norm$V2, reac_norm$V3, n = 40)
View(de)
min(de$d)
max(de$d)
contour3d(de$d, level = 0.0001, x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0.5, add = TRUE)
contour3d(de$d, level = min(de$d), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0.5, add = TRUE)
points3d(small_reac_norm$V1, small_reac_norm$V2, small_reac_norm$V3, size = 2)
contour3d(de$d, level = min(de$d), x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0.5, add = TRUE)
contour3d(de$d, level = min(de$d)+0.00000001, x = de$x/22, y = de$y/28, z = de$z/640,
color = "green", color2 = "gray",
alpha = 0.5, add = TRUE)
all_reac_norms = data.frame()
for (i in  list.files(path = '.',pattern = "reaction_norm_best_ind_s1_f0.csv"))
{
reac_norm = read.table(i, sep = ",")
reac_norm$seed = sub( "^.*s(\\d+).*",'\\1', i)
reac_norm$change = sub( "^.*f(\\d+).*",'\\1', i)
all_reac_norms = rbind(reac_norm,all_reac_norms)
}
#save(all_reac_norms,file = "all_reac_norms.R")
load("all_reac_norms.R")
#Making colors for graph
transparent <- rgb( 0, 255, 0, max = 255, alpha = 125, names = "blue50")
blue <- rgb(0, 0, 255, max = 255, alpha = 0, names = "o")
reac_norm$col = ifelse(reac_norm$V4 == 0, blue,transparent)
small_reac_norm = reac_norm[ as.numeric(row.names(reac_norm)) %% 2 == 0,]
points3d(
x= small_reac_norm$V1, y= small_reac_norm$V2, z= small_reac_norm$V3,
col = small_reac_norm$col
)
box3d(col = "gray")
library(plotly)
axx <- list(
nticks = 4,
range = c(0,20)
)
axy <- list(
nticks = 4,
range = c(0,20)
)
axz <- list(
nticks = 4,
range = c(0,20)
)
fig <- plot_ly(small_reac_norm %>% subset(V4 == 1),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(transparent,blue), alpha = 1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
#Making colors for graph
transparent <- rgb( 0, 255, 0, max = 255, alpha = 0.5, names = "blue50")
blue <- rgb(0, 0, 255, max = 255, alpha = 0, names = "o")
reac_norm$col = ifelse(reac_norm$V4 == 0, blue,transparent)
small_reac_norm = reac_norm[ as.numeric(row.names(reac_norm)) %% 2 == 0,]
points3d(
x= small_reac_norm$V1, y= small_reac_norm$V2, z= small_reac_norm$V3,
col = small_reac_norm$col
)
box3d(col = "gray")
library(plotly)
axx <- list(
nticks = 4,
range = c(0,20)
)
axy <- list(
nticks = 4,
range = c(0,20)
)
axz <- list(
nticks = 4,
range = c(0,20)
)
fig <- plot_ly(small_reac_norm %>% subset(V4 == 1),
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(transparent,blue), alpha = 1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <- plot_ly(small_reac_norm,
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(transparent,blue), alpha = 1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
#Making colors for graph
transparent <- rgb( 0, 255, 0, max = 255, alpha = 0.5)
blue <- rgb(0, 0, 255, max = 255, alpha = 125)
fig <- plot_ly(small_reac_norm,
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(rgb( 0, 255, 0, max = 255, alpha = 0.5),rgb(0, 0, 255, max = 255, alpha = 125)), alpha = 1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <- plot_ly(small_reac_norm,
x = ~V1, y = ~V2, z = ~V3, color = ~V4,
colors = c(rgb( 0, 255, 0, max = 255, alpha = 0.5),
rgb(0, 0, 255, max = 255, alpha = 125)))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <- plot_ly(small_reac_norm,
x = ~V1, y = ~V2, z = ~V3, color = ~V4,
colors = c(rgb( 0, 0, 0, max = 255, alpha = 0.5),
rgb(0, 0, 255, max = 255, alpha = 125)))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
fig <- plot_ly(small_reac_norm,
x = ~V1, y = ~V2, z = ~V3, color = ~V4, colors = c(transparent,blue), alpha = 0.1)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Energy'),
yaxis = list(title = 'Food'),
zaxis = list(title = 'Metabolite')))
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
s=interp(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3,duplicate="strip")
require(akima)
s=interp(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3,duplicate="strip")
require(rgl)
s=interp(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3,duplicate="strip")
s=akima::interp(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3,duplicate="strip")
install.packages("akima")
library(akima)
require(rgl)
s=akima::interp(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3,duplicate="strip")
surface3d(s$x,s$y,s$z,color="blue")
points3d(s)
s=akima::interp(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3)
surface3d(s$x,s$y,s$z,color="blue")
akima::interp
s=akima::interp(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3, duplicate = mean)
surface3d(s$x,s$y,s$z,color="blue")
s=akima::interp(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3)
plot3d(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3)
mesh(small_reac_norm$V1,small_reac_norm$V2,small_reac_norm$V3)
xyz = small_reac_norm[,1:3]
View(xyz)
xyz = small_reac_norm[,1:3]
mesh <- as.mesh3d(xyz, triangles = FALSE, col = "red")
mesh$vb
mesh$ib
open3d()
shade3d(mesh)
xyz = small_reac_norm[,1:3] %>% subset(v4 == 1)
xyz = small_reac_norm %>% subset(V4 == 1)
xyz = xyz[,1:3]
mesh <- as.mesh3d(xyz, triangles = FALSE, col = "red")
mesh$vb
mesh$ib
open3d()
shade3d(mesh)
xyz <- matrix(c(-1, -1, -1,
-1,  1, -1,
1,  1, -1,
1, -1, -1,
-1,  1, -1,
-1,  1,  1,
1,  1,  1,
1,  1, -1,
1, -1, -1,
1,  1, -1,
1,  1,  1,
1, -1,  1), byrow = TRUE, ncol = 3)
mesh <- as.mesh3d(xyz, triangles = FALSE, col = "red")
mesh$vb
mesh$ib
open3d()
shade3d(mesh)
xyz = small_reac_norm %>% subset(V4 == 1)
xyz = xyz[,1:3]
mesh <- as.mesh3d(xyz, triangles = FALSE, col = "red")
mesh$vb
mesh$ib
open3d()
shade3d(mesh)
small_reac_norm = reac_norm[ as.numeric(row.names(reac_norm)) %% 2 == 0,]
xyz = small_reac_norm %>% subset(V4 == 1)
xyz = xyz[,1:3]
mesh <- as.mesh3d(xyz, triangles = FALSE, col = "red")
mesh$vb
mesh$ib
open3d()
shade3d(mesh)
small_reac_norm = reac_norm[ as.numeric(row.names(reac_norm)) %% 2 == 0,]
points3d(
x= small_reac_norm$V1, y= small_reac_norm$V2, z= small_reac_norm$V3,
col = small_reac_norm$col
)
box3d(col = "gray")
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
rand_demographic = data.frame()
for (i in  list.files(path = '.',pattern = "best_ind_random_cond_sim_demographic_s\\d+_change_\\d+_amplitude_\\d+.*"))
{
conditions = read.table(i, sep = ",")
conditions$seed = sub( "^.*s(\\d+).*",'\\1', i)
conditions$change = sub( "^.*change_(\\d+).*",'\\1', i)
conditions$amplitude = sub( "^.*amplitude_(\\d+)",'\\1', i)
rand_demographic = rbind(conditions,rand_demographic)
}
n_columns = ncol(rand_demographic)
rand_demographic = rand_demographic[,-c(5: (n_columns - 3) )]
colnames(rand_demographic)= c("condition",
"active",
"spore",
"sporu",
"seed",
"change_freq",
"amplitude")
rand_demographic <- pivot_longer(
rand_demographic,
cols = c("active", "spore", "sporu"),
names_to = "variable"
)
rand_demographic$amplitude = as.factor(rand_demographic$amplitude)
rand_demographic$change_freq = as.factor(rand_demographic$change_freq)
rand_demographic$seed = as.factor(rand_demographic$seed)
rand_demographic$condition = as.factor(rand_demographic$condition)
rand_demographic$variable = as.factor(rand_demographic$variable)
new_rand_demo = rand_demographic %>%
group_by(condition,change_freq) %>%
mutate(
"ratio_value" = value / max(value)
)
new_rand_demo %>%
subset(variable == "spore") %>%
ggplot(aes(condition, seed, fill = ratio_value)) +
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ amplitude)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
rand_demographic = data.frame()
for (i in  list.files(path = '.',pattern = "random_cond_sim_demographic_s\\d+_change_\\d+_amplitude_\\d+.*"))
{
conditions = read.table(i, sep = ",")
conditions$seed = sub( "^.*s(\\d+).*",'\\1', i)
conditions$change = sub( "^.*change_(\\d+).*",'\\1', i)
conditions$amplitude = sub( "^.*amplitude_(\\d+)",'\\1', i)
rand_demographic = rbind(conditions,rand_demographic)
}
n_columns = ncol(rand_demographic)
rand_demographic = rand_demographic[,-c(5: (n_columns - 3) )]
colnames(rand_demographic)= c("condition",
"active",
"spore",
"sporu",
"seed",
"change_freq",
"amplitude")
rand_demographic <- pivot_longer(
rand_demographic,
cols = c("active", "spore", "sporu"),
names_to = "variable"
)
rand_demographic$amplitude = as.factor(rand_demographic$amplitude)
rand_demographic$change_freq = as.factor(rand_demographic$change_freq)
rand_demographic$seed = as.factor(rand_demographic$seed)
rand_demographic$condition = as.factor(rand_demographic$condition)
rand_demographic$variable = as.factor(rand_demographic$variable)
new_rand_demo = rand_demographic %>%
group_by(condition,change_freq) %>%
mutate(
"ratio_value" = value / max(value)
)
new_rand_demo %>%
subset(variable == "spore") %>%
ggplot(aes(condition, seed, fill = ratio_value)) +
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ amplitude)
###Ex 1
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom( 3 , size=3 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
#To display the posterior distribution now:
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
###Ex 1
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom( 3 , size=4 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
#To display the posterior distribution now:
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
###Ex 1
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom(5 , size=7 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
#To display the posterior distribution now:
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
###Ex 1
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- ifelse( p_grid < 0.5 , 0 , 1 )
# compute likelihood at each value in grid
likelihood <- dbinom(3 , size=3 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
#To display the posterior distribution now:
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
###Ex 1
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- ifelse( p_grid < 0.5 , 0 , 1 )
# compute likelihood at each value in grid
likelihood <- dbinom(3 , size=4 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
#To display the posterior distribution now:
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
# compute likelihood at each value in grid
likelihood <- dbinom(4 , size=7 , prob=p_grid )
###Ex 1
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- ifelse( p_grid < 0.5 , 0 , 1 )
# compute likelihood at each value in grid
likelihood <- dbinom(4 , size=7 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
#To display the posterior distribution now:
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep( 1 , 1000 )
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
set.seed(100)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
sum(samples < 0.2 )
samples < 0.2
sum(samples < 0.2 )/sum(samples)
sum(samples < 0.2 )/length(samples)
length(samples)
sum(samples > 0.8 )/length(samples)
sum(samples < 0.8 & samples > 0.8)/length(samples)
sum(samples < 0.8 & samples > 0.2)/length(samples)
quantile(samples, 0.2)
quantile(samples, 0.8)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
sum(samples < 0.2 )/length(samples)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages(c("coda","mvtnorm","devtools","dagitty")) library(devtools)
devtools::install_github("rmcelreath/rethinking")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(rethinking)
devtools::install_github("rmcelreath/rethinking")
