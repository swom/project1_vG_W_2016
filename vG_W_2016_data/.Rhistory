{
if(is.character(value) && length(layers) < 3)
{
if(value == "  ! " )
{
node = list.append(node,funder_network[,last_node_iterator : (iterator - 1)])
print("node!")
last_node_iterator = iterator + 1
}
else if(value == "  | ")
{
print("layer!")
layers = list.append(layers, node)
node = list()
last_node_iterator = iterator + 1
}
}
else if(is.character(value) && length(layers) >= 3 && layer_threshold_iterator <= 3)
{
if(value == "  | ")
{
print("node_treshold")
for( i in funder_network[,last_node_iterator : (iterator - 1)])
{
print(i)
layers[[layer_threshold_iterator]][[node_threshold_iterator]]$threshold = i
node_threshold_iterator = node_threshold_iterator + 1
}
layer_threshold_iterator = layer_threshold_iterator + 1
node_threshold_iterator = 1
}
}
iterator = iterator + 1
}
as_tibble(funder_network)
layers = list()
node = list()
iterator = 1
last_node_iterator = 1
layer_threshold_iterator = 2 #important, because it skips input layer
node_threshold_iterator = 1
for(value in funder_network)
{
if(is.character(value) && length(layers) < 3)
{
if(value == "  ! " )
{
node = list.append(node,funder_network[,last_node_iterator : (iterator - 1)])
print("node!")
last_node_iterator = iterator + 1
}
else if(value == "  | ")
{
print("layer!")
layers = list.append(layers, node)
node = list()
last_node_iterator = iterator + 1
}
}
else if(is.character(value) &&
length(layers) >= 3 &&
layer_threshold_iterator <= 3)
{
if(value == "  | ")
{
print("node_treshold")
for( i in funder_network[,last_node_iterator : (iterator - 1)])
{
print(i)
layers[[layer_threshold_iterator]][[node_threshold_iterator]]$threshold = i
node_threshold_iterator = node_threshold_iterator + 1
}
last_node_iterator = last_node_iterator + 1
layer_threshold_iterator = layer_threshold_iterator + 1
node_threshold_iterator = 1
}
}
iterator = iterator + 1
}
iterator = 1
layers = list()
node = list()
iterator = 1
last_node_iterator = 1
layer_threshold_iterator = 2 #important, because it skips input layer
node_threshold_iterator = 1
for(value in funder_network)
{
if(is.character(value) && length(layers) < 3)
{
if(value == "  ! " )
{
node = list.append(node,funder_network[,last_node_iterator : (iterator - 1)])
print("node!")
last_node_iterator = iterator + 1
}
else if(value == "  | ")
{
print("layer!")
layers = list.append(layers, node)
node = list()
last_node_iterator = iterator + 1
}
}
else if(is.character(value) &&
length(layers) >= 3 &&
layer_threshold_iterator <= 3)
{
if(value == "  | ")
{
print("node_treshold")
for( i in funder_network[,last_node_iterator : (iterator - 1)])
{
print(i)
layers[[layer_threshold_iterator]][[node_threshold_iterator]]$threshold = i
node_threshold_iterator = node_threshold_iterator + 1
}
last_node_iterator = iterator + 1
layer_threshold_iterator = layer_threshold_iterator + 1
node_threshold_iterator = 1
}
}
iterator = iterator + 1
}
layers = list()
node = list()
iterator = 1
last_node_iterator = 1
layer_threshold_iterator = 2 #important, because it skips input layer
node_threshold_iterator = 1
node_state_iterator = 1
for(value in funder_network)
{
if(is.character(value) && length(layers) < 3)
{
if(value == "  ! " )
{
node = list.append(node,funder_network[,last_node_iterator : (iterator - 1)])
print("node!")
last_node_iterator = iterator + 1
}
else if(value == "  | ")
{
print("layer!")
layers = list.append(layers, node)
node = list()
last_node_iterator = iterator + 1
}
}
else if(is.character(value) &&
length(layers) >= 3 &&
layer_threshold_iterator <= 3)
{
if(value == "  | ")
{
print("node_treshold")
for( i in funder_network[,last_node_iterator : (iterator - 1)])
{
print(i)
layers[[layer_threshold_iterator]][[node_threshold_iterator]]$threshold = i
node_threshold_iterator = node_threshold_iterator + 1
}
last_node_iterator = iterator + 1
layer_threshold_iterator = layer_threshold_iterator + 1
node_threshold_iterator = 1
}
}
else if(layer_threshold_iterator > 3)
{
layers[[2]][[node_state_iterator]]$state = value
node_state_iterator = node_state_iterator + 1
}
iterator = iterator + 1
}
View(layers)
as_tibble(layers)
parse(length(layers))
as.character(length(layers))
layers$parse(as.character(4)) = list.append(layers, node)
parse(as.character(4))
names(layers)= c("Layer1", "Layer2", "Layer3")
View(layers)
names(layers)= c("Layer1", "Layer2", "Layer2")
View(layers)
names(layers[[length(layers)]]) = paste("Layer", as.character(length(layers)))
View(layers)
names(layers[[length(layers)]]) = paste("Layer_", as.character(length(layers)))
layers[[length(layers)]]
names(layers[[length(layers)]]) = paste("Layer_", as.character(length(layers)), sep = "")
View(layers)
layers[[length(layers)]]
names(layers[[length(layers)]]) = paste("Layer_", as.character(length(layers)), sep = "")
layers
names(layers[length(layers)]) = paste("Layer_", as.character(length(layers)), sep = "")
View(layers)
names(layers[length(layers)])
names(layers[length(layers)])
names(layers[length(layers)]) = paste("Layer_", as.character(length(layers)), sep = "")
length(layers)
names(layers[length(layers)]) = paste("Layer_", length(layers), sep = "")
layers
names(layers)
names(layers)[length(layers)] = paste("Layer_", length(layers), sep = "")
layers
layers = list()
node = list()
iterator = 1
last_node_iterator = 1
layer_threshold_iterator = 2 #important, because it skips input layer
node_threshold_iterator = 1
node_state_iterator = 1
for(value in funder_network)
{
if(is.character(value) && length(layers) < 3)
{
if(value == "  ! " )
{
node = list.append(node,funder_network[,last_node_iterator : (iterator - 1)])
names(node)[length(node)] = paste("Node_", length(node), sep = "")
print("node!")
last_node_iterator = iterator + 1
}
else if(value == "  | ")
{
print("layer!")
layers = list.append(layers, node)
names(layers)[length(layers)] = paste("Layer_", length(layers), sep = "")
node = list()
last_node_iterator = iterator + 1
}
}
else if(is.character(value) &&
length(layers) >= 3 &&
layer_threshold_iterator <= 3)
{
if(value == "  | ")
{
print("node_treshold")
for( i in funder_network[,last_node_iterator : (iterator - 1)])
{
print(i)
layers[[layer_threshold_iterator]][[node_threshold_iterator]]$threshold = i
node_threshold_iterator = node_threshold_iterator + 1
}
last_node_iterator = iterator + 1
layer_threshold_iterator = layer_threshold_iterator + 1
node_threshold_iterator = 1
}
}
else if(layer_threshold_iterator > 3)
{
layers[[2]][[node_state_iterator]]$state = value
node_state_iterator = node_state_iterator + 1
}
iterator = iterator + 1
}
layers
as_tibble(layer)
as_tibble(layers)
as.data.frame(layers)
names(weights) = c(1:length(weights))
c(1:length(weights))
layers = list()
node = list()
iterator = 1
last_node_iterator = 1
layer_threshold_iterator = 2 #important, because it skips input layer
node_threshold_iterator = 1
node_state_iterator = 1
for(value in funder_network)
{
if(is.character(value) && length(layers) < 3)
{
if(value == "  ! " )
{
weights = as.vector(funder_network[,last_node_iterator : (iterator - 1)])
names(weights) = c(1:length(weights))
node = list.append(node,)
names(node)[length(node)] = paste("Node_", length(node), sep = "")
print("node!")
last_node_iterator = iterator + 1
}
else if(value == "  | ")
{
print("layer!")
layers = list.append(layers, node)
names(layers)[length(layers)] = paste("Layer_", length(layers), sep = "")
node = list()
last_node_iterator = iterator + 1
}
}
else if(is.character(value) &&
length(layers) >= 3 &&
layer_threshold_iterator <= 3)
{
if(value == "  | ")
{
print("node_treshold")
for( i in funder_network[,last_node_iterator : (iterator - 1)])
{
print(i)
layers[[layer_threshold_iterator]][[node_threshold_iterator]]$threshold = i
node_threshold_iterator = node_threshold_iterator + 1
}
last_node_iterator = iterator + 1
layer_threshold_iterator = layer_threshold_iterator + 1
node_threshold_iterator = 1
}
}
else if(layer_threshold_iterator > 3)
{
layers[[2]][[node_state_iterator]]$state = value
node_state_iterator = node_state_iterator + 1
}
iterator = iterator + 1
}
layers = list()
node = list()
iterator = 1
last_node_iterator = 1
layer_threshold_iterator = 2 #important, because it skips input layer
node_threshold_iterator = 1
node_state_iterator = 1
for(value in funder_network)
{
if(is.character(value) && length(layers) < 3)
{
if(value == "  ! " )
{
weights = as.vector(funder_network[,last_node_iterator : (iterator - 1)])
names(weights) = c(1:length(weights))
node = list.append(node, weights)
names(node)[length(node)] = paste("Node_", length(node), sep = "")
print("node!")
last_node_iterator = iterator + 1
}
else if(value == "  | ")
{
print("layer!")
layers = list.append(layers, node)
names(layers)[length(layers)] = paste("Layer_", length(layers), sep = "")
node = list()
last_node_iterator = iterator + 1
}
}
else if(is.character(value) &&
length(layers) >= 3 &&
layer_threshold_iterator <= 3)
{
if(value == "  | ")
{
print("node_treshold")
for( i in funder_network[,last_node_iterator : (iterator - 1)])
{
print(i)
layers[[layer_threshold_iterator]][[node_threshold_iterator]]$threshold = i
node_threshold_iterator = node_threshold_iterator + 1
}
last_node_iterator = iterator + 1
layer_threshold_iterator = layer_threshold_iterator + 1
node_threshold_iterator = 1
}
}
else if(layer_threshold_iterator > 3)
{
layers[[2]][[node_state_iterator]]$state = value
node_state_iterator = node_state_iterator + 1
}
iterator = iterator + 1
}
as.data.frame(layers)
c(paste0("w",1:length(weights)))
layers = list()
node = list()
iterator = 1
last_node_iterator = 1
layer_threshold_iterator = 2 #important, because it skips input layer
node_threshold_iterator = 1
node_state_iterator = 1
for(value in funder_network)
{
if(is.character(value) && length(layers) < 3)
{
if(value == "  ! " )
{
weights = as.vector(funder_network[,last_node_iterator : (iterator - 1)])
names(weights) = c(paste0("w",1:length(weights)))
node = list.append(node, weights)
names(node)[length(node)] = paste("Node_", length(node), sep = "")
print("node!")
last_node_iterator = iterator + 1
}
else if(value == "  | ")
{
print("layer!")
layers = list.append(layers, node)
names(layers)[length(layers)] = paste("Layer_", length(layers), sep = "")
node = list()
last_node_iterator = iterator + 1
}
}
else if(is.character(value) &&
length(layers) >= 3 &&
layer_threshold_iterator <= 3)
{
if(value == "  | ")
{
print("node_treshold")
for( i in funder_network[,last_node_iterator : (iterator - 1)])
{
print(i)
layers[[layer_threshold_iterator]][[node_threshold_iterator]]$threshold = i
node_threshold_iterator = node_threshold_iterator + 1
}
last_node_iterator = iterator + 1
layer_threshold_iterator = layer_threshold_iterator + 1
node_threshold_iterator = 1
}
}
else if(layer_threshold_iterator > 3)
{
layers[[2]][[node_state_iterator]]$state = value
node_state_iterator = node_state_iterator + 1
}
iterator = iterator + 1
}
as.data.frame(layers)
View(layers)
layers_df = as.data.frame(layers)
View(layers_df)
View(layers)
library(tidyr)
library(ggplot2)
demographic = data.frame(cycle = c(), active = c(), spore = c(), sporu = c(), seed = c())
for (i in 1 : list.files(path = '.',pattern = "sim_demographic_s*"))
{
replicate = read.csv(i)
replicate$seed = i;
demographic = rbind(replicate,demographic)
}
for (i in  list.files(path = '.',pattern = "sim_demographic_s*"))
{
replicate = read.csv(i)
replicate$seed = i;
demographic = rbind(replicate,demographic)
}
library(stringr)
for (i in  list.files(path = '.',pattern = "sim_demographic_s*"))
demographic = data.frame(cycle = c(), active = c(), spore = c(), sporu = c(), seed = c())
for (i in  list.files(path = '.',pattern = "sim_demographic_s*"))
{
replicate = read.csv(i)
replicate$seed = str_extract(i, pattern = "[\\sim_demographic_s\\/](\\d+)");
demographic = rbind(replicate,demographic)
}
str_extract(i, pattern = "[\\sim_demographic_s\\/](\\d+)")
str_extract(i, pattern = "[\\sim_demographic_s\\](\\d+)");
str_extract(i, pattern = "(\\d+)")
demographic = data.frame(cycle = c(), active = c(), spore = c(), sporu = c(), seed = c())
for (i in  list.files(path = '.',pattern = "sim_demographic_s*"))
{
replicate = read.csv(i)
replicate$seed = str_extract(i, pattern = "(\\d+)");
demographic = rbind(replicate,demographic)
}
replicate = read.csv(i)
replicate$seed = str_extract(i, pattern = "(\\d+)");
demographic = rbind(replicate,demographic)
View(replicate)
demographic = data.frame(cycle = c(), active = c(), spore = c(), sporu = c(), seed = c())
for (i in  list.files(path = '.',pattern = "sim_demographic_s*"))
{
replicate = read.csv(i)
replicate$seed = str_extract(i, pattern = "(\\d+)");
colnames(replicate) = colnames(demographic)
demographic = rbind(replicate,demographic)
}
colnames(demographic)= c("cycle", "active", "spore", "sporu" , "seed")
demographic$seed = as.factor(demographic$seed)
demographic <- pivot_longer(
demographic,
cols = c("active", "spore", "sporu"),
names_to = "variable"
)
demographic$variable = as.factor(demographic$variable)
ggplot(demographic,aes(cycle,value, shape = seed, color = variable)) +
geom_point(alpha = 0.1) +
geom_smooth()
View(demographic)
ggplot(demographic,aes(cycle,value, color = variable)) +
geom_point(alpha = 0.1)
library(tidyr)
library(stringr)
library(ggplot2)
demographic = data.frame(cycle = c(), active = c(), spore = c(), sporu = c(), seed = c())
for (i in  list.files(path = '.',pattern = "sim_demographic_s*"))
{
replicate = read.csv(i)
replicate$seed = str_extract(i, pattern = "(\\d+)");
colnames(replicate) = colnames(demographic)
demographic = rbind(replicate,demographic)
}
colnames(demographic)= c("cycle", "active", "spore", "sporu" , "seed")
demographic$seed = as.factor(demographic$seed)
demographic <- pivot_longer(
demographic,
cols = c("active", "spore", "sporu"),
names_to = "variable"
)
demographic$variable = as.factor(demographic$variable)
ggplot(demographic,aes(cycle,value, color = variable)) +
geom_point(alpha = 0.1)
