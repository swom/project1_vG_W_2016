library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
dir = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(paste(dir,"/vG_W_2016_data",sep = ""))
rand_demographic = data.frame()
for (i in  list.files(path = '.',pattern = "random_cond_sim_demographic_s\\d+_change_\\d+_amplitude_\\d+.*"))
{
conditions = read.table(i, sep = ",")
conditions$seed = sub( "^.*s(\\d+).*",'\\1', i)
conditions$change = sub( "^.*change_(\\d+).*",'\\1', i)
conditions$amplitude = sub( "^.*amplitude_(\\d+)",'\\1', i)
rand_demographic = rbind(conditions,rand_demographic)
}
n_columns = ncol(rand_demographic)
rand_demographic = rand_demographic[,-c(5: (n_columns - 3) )]
colnames(rand_demographic)= c("condition",
"active",
"spore",
"sporu",
"seed",
"change_freq",
"amplitude")
rand_demographic <- pivot_longer(
rand_demographic,
cols = c("active", "spore", "sporu"),
names_to = "variable"
)
rand_demographic$amplitude = as.factor(rand_demographic$amplitude)
rand_demographic$change_freq = as.factor(rand_demographic$change_freq)
rand_demographic$seed = as.factor(rand_demographic$seed)
rand_demographic$condition = as.factor(rand_demographic$condition)
rand_demographic$variable = as.factor(rand_demographic$variable)
new_rand_demo = rand_demographic %>%
group_by(condition,change_freq) %>%
mutate(
"ratio_value" = value / max(value)
)
new_rand_demo %>%
subset(variable == "spore") %>%
ggplot(aes(condition, seed, fill = ratio_value)) +
geom_tile(color = "black", size = 0.5) +
facet_grid(change_freq  ~ amplitude)
dir = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(paste(dir,"/vG_W_2016_data",sep = ""))
########Plot Philogenesis###############
funders_success = data.frame()
for (i in list.files(path = '.',pattern = "funders_success_s1.csv"))
{
print(i)
sim_run = read.csv(i, header = FALSE, sep = ',')
funders_success = rbind(sim_run,funders_success)
}
#simple plot to see if there are any super fit individuals
simple_frame = funders_success[,c(1,length(funders_success))]
ggplot(simple_frame, aes(x = V1, y = V54))+
geom_point()+
geom_smooth()
#we take only last generation
last_gen = as_tibble(funders_success[funders_success$V1 == max(funders_success$V1) - 1,2])
last_gen$value = as.character(last_gen$value)
for (i in 1:length(last_gen$value)) {
last_gen$value[i] =
substring(last_gen$value[i],
first = 2,
last = nchar(last_gen$value[i]) - 2)
}
get_parts <- function(x){
parts <- c(unlist(strsplit(x, split = " ")))
parts
}
test = get_parts(last_gen$value[1])
for (i in 2 : (nrow(last_gen))) {
test = qpcR:::rbind.na(
test,
get_parts(last_gen$value[i])
)
}
test = as.data.frame(test)
colnames(test) = paste("level",c(1:ncol(test)), sep = "")
edge_list <- test %>% select("level1","level2") %>% unique %>% rename(from="level1", to="level2")
edge_list$from = paste("level", toString(1), "_", edge_list$from, sep="")
edge_list$to = paste("level", toString(2), "_", edge_list$to, sep="")
for(j in 2:(ncol(test) - 1))
{
edges <-
test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
edges$from = paste("level", toString(j), "_",edges$from, sep="")
edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
edge_list = rbind(edge_list, edges)
}
saveRDS(edge_list,"edge_list_S1_last_gen")
loaded_edge_list = readRDS("edge_list_S1_last_gen")
mygraph <- graph_from_data_frame( loaded_edge_list )
#saveRDS(mygraph,file = "phylogenesis_s1")
phylo = readRDS("phylogenesis_s1")
#Testing different possible layouts
ggraph(mygraph, layout = 'tree') +
geom_edge_diagonal() +
geom_node_point() +
theme_graph()
library(ggraph)
install.packages("ggraph")
install.packages("ggraph")
install.packages("ggraph")
# {
#   edges <-
#     test %>% select(colnames(test)[j], colnames(test)[j + 1]) %>% unique  %>% rename(from=colnames(test)[j], to=colnames(test)[j + 1])
#   edges$from = paste("level", toString(j), "_",edges$from, sep="")
#   edges$to = paste("level", toString(j + 1), "_", edges$to, sep="")
#   edge_list = rbind(edge_list, edges)
# }
#
#
# saveRDS(edge_list,"edge_list_S1_last_gen")
loaded_edge_list = readRDS("edge_list_S1_last_gen")
mygraph <- graph_from_data_frame( loaded_edge_list )
#saveRDS(mygraph,file = "phylogenesis_s1")
phylo = readRDS("phylogenesis_s1")
#Testing different possible layouts
ggraph(mygraph, layout = 'tree') +
geom_edge_diagonal() +
geom_node_point() +
theme_graph()
ggraph(mygraph, layout = 'tree') +
geom_edge_elbow() +
coord_fixed()
library(ggraph)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(stringi)
library(rlist)
library(igraph)
library(ggraph)
library(networkD3)
mygraph <- graph_from_data_frame( loaded_edge_list )
#saveRDS(mygraph,file = "phylogenesis_s1")
phylo = readRDS("phylogenesis_s1")
#Testing different possible layouts
ggraph(mygraph, layout = 'tree') +
geom_edge_diagonal() +
geom_node_point() +
theme_graph()
ggraph(mygraph, layout = 'tree') +
geom_edge_elbow() +
coord_fixed()
ggraph(mygraph, layout = 'circlepack') +
geom_node_circle(aes(fill = depth), size = 0.25, n = 50) +
coord_fixed()
#Testing different possible layouts
ggraph(mygraph, layout = 'tree') +
geom_edge_diagonal() +
geom_node_point() +
theme_graph()
ggraph(mygraph, layout = 'tree') +
geom_edge_elbow() +
coord_fixed()
